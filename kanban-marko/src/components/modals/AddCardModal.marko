import type { UsersList, TagsList } from "../../lib/api";
import { createCard } from "../../lib/client/cards";
export interface Input {
  isOpen: boolean;
  boardId: string;
  users: UsersList;
  tags: TagsList;
  onClose: () => void;
  onCardAdd?: (data: {
    id: string;
    title: string;
    description: string | null;
    assigneeId: string | null;
    tagIds: string[];
  }) => void;
}

<let/selectedTagIds=([] as string[])>
<let/error="">
<let/isSubmitting=false>

<if=input.isOpen>
  <dialog
    class="modal modal-open !mt-0 !z-[9999]"
    onClick=(e) => {
      if (e.target === e.currentTarget) input.onClose();
    }>
    <div class="modal-backdrop bg-black/70"/>
    <div class="modal-box bg-base-200 dark:bg-base-300 relative z-10">
      <form onSubmit=async (e) => {
        e.preventDefault();
        const form = e.target as HTMLFormElement;
        const formData = new FormData(form);

        const title = formData.get("title") as string;
        const description = formData.get("description") as string;
        const assigneeId = formData.get("assigneeId") as string;
        const boardId = formData.get("boardId") as string;

        const body = {
          boardId,
          title,
          description: description || null,
          assigneeId: assigneeId || null,
          tagIds: selectedTagIds,
        };

        error = "";
        isSubmitting = true;

        try {
          const result = await createCard(body);

          if (!result.success) {
            error = result.error || "An error occurred";
            isSubmitting = false;
            return;
          }

          if (input.onCardAdd && result.data) {
            input.onCardAdd({
              id: result.data.id,
              title,
              description: description || null,
              assigneeId: assigneeId || null,
              tagIds: selectedTagIds,
            });
          }

          form.reset();
          selectedTagIds = [];
          input.onClose();
        } catch (err) {
          error = "An unexpected error occurred. Please try again.";
        } finally {
          isSubmitting = false;
        }
      }>
        <button
          type="button"
          class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2"
          onClick=input.onClose>
          âœ•
        </button>
        <h3 class="font-bold text-lg mb-4">
          Add New Card
        </h3>

        <if=error>
          <div class="alert alert-error mb-4">
            <span>${error}</span>
          </div>
        </if>

        <input type="hidden" name="boardId" value=input.boardId>

        <div class="form-control w-full mb-4">
          <label class="label">
            <span class="label-text">
              Title
            </span>
          </label>
          <input
            type="text"
            name="title"
            class="input input-bordered w-full"
            placeholder="Enter card title"
            required
            disabled=isSubmitting>
        </div>

        <div class="form-control w-full mb-4">
          <label class="label">
            <span class="label-text">
              Description
            </span>
          </label>
          <textarea
            name="description"
            class="textarea textarea-bordered h-24 w-full"
            placeholder="Enter card description (optional)"
            disabled=isSubmitting/>
        </div>

        <div class="form-control w-full mb-4">
          <label class="label">
            <span class="label-text">
              Assignee
            </span>
          </label>
          <select
            name="assigneeId"
            class="select select-bordered w-full"
            disabled=isSubmitting>
            <option value="">
              Unassigned
            </option>
            <for|user| of=input.users by=(user) => user.id>
              <option value=user.id>
                ${user.name}
              </option>
            </for>
          </select>
        </div>

        <div class="form-control w-full mb-4">
          <label class="label">
            <span class="label-text">
              Tags
            </span>
          </label>
          <div class="flex flex-wrap gap-2 p-4 border border-base-300 rounded-lg">
            <for|tag| of=input.tags by=(tag) => tag.id>
              <button
                type="button"
                class=`badge border-2 font-semibold cursor-pointer transition-all hover:scale-105 ${selectedTagIds.includes(tag.id) ? "text-white" : "badge-outline"}`
                style=(
                  selectedTagIds.includes(tag.id)
                    ? `background-color: ${tag.color}; border-color: ${tag.color}`
                    : `color: ${tag.color}; border-color: ${tag.color}`
                )
                onClick=() => {
                  const isSelected = selectedTagIds.includes(tag.id);
                  selectedTagIds = isSelected
                    ? selectedTagIds.filter((id) => id !== tag.id)
                    : [...selectedTagIds, tag.id];
                }>
                ${tag.name}
              </button>
            </for>
          </div>
        </div>

        <div class="modal-action">
          <button
            type="button"
            class="btn btn-ghost"
            onClick=input.onClose
            disabled=isSubmitting>
            Cancel
          </button>
          <button type="submit" class="btn btn-primary" disabled=isSubmitting>
            ${isSubmitting ? "Adding..." : "Add Card"}
          </button>
        </div>
      </form>
    </div>
  </dialog>
</if>
