// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: tags.sql

package sqlcgen

import (
	"context"
)

const getTags = `-- name: GetTags :many
SELECT id, name, color
FROM tags
ORDER BY name ASC
`

type GetTagsRow struct {
	ID    string `json:"id"`
	Name  string `json:"name"`
	Color string `json:"color"`
}

func (q *Queries) GetTags(ctx context.Context) ([]GetTagsRow, error) {
	rows, err := q.db.QueryContext(ctx, getTags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetTagsRow{}
	for rows.Next() {
		var i GetTagsRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Color); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
