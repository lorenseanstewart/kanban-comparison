// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: lists.sql

package sqlcgen

import (
	"context"
)

const createList = `-- name: CreateList :exec
INSERT INTO lists (id, board_id, title, position, created_at)
VALUES (?, ?, ?, ?, ?)
`

type CreateListParams struct {
	ID        string `json:"id"`
	BoardID   string `json:"board_id"`
	Title     string `json:"title"`
	Position  int64  `json:"position"`
	CreatedAt int64  `json:"created_at"`
}

func (q *Queries) CreateList(ctx context.Context, arg CreateListParams) error {
	_, err := q.db.ExecContext(ctx, createList,
		arg.ID,
		arg.BoardID,
		arg.Title,
		arg.Position,
		arg.CreatedAt,
	)
	return err
}

const getListByBoardIdAndTitle = `-- name: GetListByBoardIdAndTitle :one
SELECT id, title, position, board_id
FROM lists
WHERE board_id = ? AND title = ?
LIMIT 1
`

type GetListByBoardIdAndTitleParams struct {
	BoardID string `json:"board_id"`
	Title   string `json:"title"`
}

type GetListByBoardIdAndTitleRow struct {
	ID       string `json:"id"`
	Title    string `json:"title"`
	Position int64  `json:"position"`
	BoardID  string `json:"board_id"`
}

func (q *Queries) GetListByBoardIdAndTitle(ctx context.Context, arg GetListByBoardIdAndTitleParams) (GetListByBoardIdAndTitleRow, error) {
	row := q.db.QueryRowContext(ctx, getListByBoardIdAndTitle, arg.BoardID, arg.Title)
	var i GetListByBoardIdAndTitleRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Position,
		&i.BoardID,
	)
	return i, err
}

const getListsByBoardId = `-- name: GetListsByBoardId :many
SELECT id, title, position
FROM lists
WHERE board_id = ?
ORDER BY position ASC
`

type GetListsByBoardIdRow struct {
	ID       string `json:"id"`
	Title    string `json:"title"`
	Position int64  `json:"position"`
}

func (q *Queries) GetListsByBoardId(ctx context.Context, boardID string) ([]GetListsByBoardIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getListsByBoardId, boardID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetListsByBoardIdRow{}
	for rows.Next() {
		var i GetListsByBoardIdRow
		if err := rows.Scan(&i.ID, &i.Title, &i.Position); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
