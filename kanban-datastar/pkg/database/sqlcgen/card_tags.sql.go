// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: card_tags.sql

package sqlcgen

import (
	"context"
	"strings"
)

const createCardTag = `-- name: CreateCardTag :exec
INSERT INTO card_tags (card_id, tag_id)
VALUES (?, ?)
`

type CreateCardTagParams struct {
	CardID string `json:"card_id"`
	TagID  string `json:"tag_id"`
}

func (q *Queries) CreateCardTag(ctx context.Context, arg CreateCardTagParams) error {
	_, err := q.db.ExecContext(ctx, createCardTag, arg.CardID, arg.TagID)
	return err
}

const deleteCardTags = `-- name: DeleteCardTags :exec
DELETE FROM card_tags
WHERE card_id = ?
`

func (q *Queries) DeleteCardTags(ctx context.Context, cardID string) error {
	_, err := q.db.ExecContext(ctx, deleteCardTags, cardID)
	return err
}

const getTagsByCardIds = `-- name: GetTagsByCardIds :many
SELECT ct.card_id, t.id as tag_id, t.name as tag_name, t.color as tag_color
FROM card_tags ct
INNER JOIN tags t ON ct.tag_id = t.id
WHERE ct.card_id IN (/*SLICE:card_ids*/?)
`

type GetTagsByCardIdsRow struct {
	CardID   string `json:"card_id"`
	TagID    string `json:"tag_id"`
	TagName  string `json:"tag_name"`
	TagColor string `json:"tag_color"`
}

func (q *Queries) GetTagsByCardIds(ctx context.Context, cardIds []string) ([]GetTagsByCardIdsRow, error) {
	query := getTagsByCardIds
	var queryParams []interface{}
	if len(cardIds) > 0 {
		for _, v := range cardIds {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:card_ids*/?", strings.Repeat(",?", len(cardIds))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:card_ids*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetTagsByCardIdsRow{}
	for rows.Next() {
		var i GetTagsByCardIdsRow
		if err := rows.Scan(
			&i.CardID,
			&i.TagID,
			&i.TagName,
			&i.TagColor,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
