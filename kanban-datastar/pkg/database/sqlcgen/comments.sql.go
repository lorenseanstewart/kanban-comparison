// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: comments.sql

package sqlcgen

import (
	"context"
	"strings"
)

const createComment = `-- name: CreateComment :exec
INSERT INTO comments (id, card_id, user_id, text, created_at)
VALUES (?, ?, ?, ?, ?)
`

type CreateCommentParams struct {
	ID        string `json:"id"`
	CardID    string `json:"card_id"`
	UserID    string `json:"user_id"`
	Text      string `json:"text"`
	CreatedAt int64  `json:"created_at"`
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) error {
	_, err := q.db.ExecContext(ctx, createComment,
		arg.ID,
		arg.CardID,
		arg.UserID,
		arg.Text,
		arg.CreatedAt,
	)
	return err
}

const getCommentsByCardIds = `-- name: GetCommentsByCardIds :many
SELECT id, card_id, user_id, text, created_at
FROM comments
WHERE card_id IN (/*SLICE:card_ids*/?)
ORDER BY created_at ASC
`

func (q *Queries) GetCommentsByCardIds(ctx context.Context, cardIds []string) ([]Comment, error) {
	query := getCommentsByCardIds
	var queryParams []interface{}
	if len(cardIds) > 0 {
		for _, v := range cardIds {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:card_ids*/?", strings.Repeat(",?", len(cardIds))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:card_ids*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Comment{}
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.CardID,
			&i.UserID,
			&i.Text,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
