// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: boards.sql

package sqlcgen

import (
	"context"
	"database/sql"
)

const createBoard = `-- name: CreateBoard :exec
INSERT INTO boards (id, title, description, created_at)
VALUES (?, ?, ?, ?)
`

type CreateBoardParams struct {
	ID          string         `json:"id"`
	Title       string         `json:"title"`
	Description sql.NullString `json:"description"`
	CreatedAt   int64          `json:"created_at"`
}

func (q *Queries) CreateBoard(ctx context.Context, arg CreateBoardParams) error {
	_, err := q.db.ExecContext(ctx, createBoard,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.CreatedAt,
	)
	return err
}

const getBoard = `-- name: GetBoard :one
SELECT id, title, description
FROM boards
WHERE id = ?
LIMIT 1
`

type GetBoardRow struct {
	ID          string         `json:"id"`
	Title       string         `json:"title"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) GetBoard(ctx context.Context, id string) (GetBoardRow, error) {
	row := q.db.QueryRowContext(ctx, getBoard, id)
	var i GetBoardRow
	err := row.Scan(&i.ID, &i.Title, &i.Description)
	return i, err
}

const getBoards = `-- name: GetBoards :many
SELECT id, title, description
FROM boards
ORDER BY created_at ASC
`

type GetBoardsRow struct {
	ID          string         `json:"id"`
	Title       string         `json:"title"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) GetBoards(ctx context.Context) ([]GetBoardsRow, error) {
	rows, err := q.db.QueryContext(ctx, getBoards)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetBoardsRow{}
	for rows.Next() {
		var i GetBoardsRow
		if err := rows.Scan(&i.ID, &i.Title, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
