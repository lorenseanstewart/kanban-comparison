// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: cards.sql

package sqlcgen

import (
	"context"
	"database/sql"
	"strings"
)

const createCard = `-- name: CreateCard :exec
INSERT INTO cards (id, list_id, title, description, assignee_id, position, completed, created_at)
VALUES (?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateCardParams struct {
	ID          string         `json:"id"`
	ListID      string         `json:"list_id"`
	Title       string         `json:"title"`
	Description sql.NullString `json:"description"`
	AssigneeID  sql.NullString `json:"assignee_id"`
	Position    int64          `json:"position"`
	Completed   sql.NullInt64  `json:"completed"`
	CreatedAt   int64          `json:"created_at"`
}

func (q *Queries) CreateCard(ctx context.Context, arg CreateCardParams) error {
	_, err := q.db.ExecContext(ctx, createCard,
		arg.ID,
		arg.ListID,
		arg.Title,
		arg.Description,
		arg.AssigneeID,
		arg.Position,
		arg.Completed,
		arg.CreatedAt,
	)
	return err
}

const deleteCard = `-- name: DeleteCard :exec
DELETE FROM cards
WHERE id = ?
`

func (q *Queries) DeleteCard(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteCard, id)
	return err
}

const getCardByCardId = `-- name: GetCardByCardId :one
SELECT id, list_id, title, description, assignee_id, position, completed, created_at
FROM cards
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetCardByCardId(ctx context.Context, id string) (Card, error) {
	row := q.db.QueryRowContext(ctx, getCardByCardId, id)
	var i Card
	err := row.Scan(
		&i.ID,
		&i.ListID,
		&i.Title,
		&i.Description,
		&i.AssigneeID,
		&i.Position,
		&i.Completed,
		&i.CreatedAt,
	)
	return i, err
}

const getCardsByListIds = `-- name: GetCardsByListIds :many
SELECT id, title, description, position, completed, assignee_id, list_id
FROM cards
WHERE list_id IN (/*SLICE:list_ids*/?)
ORDER BY position ASC
`

type GetCardsByListIdsRow struct {
	ID          string         `json:"id"`
	Title       string         `json:"title"`
	Description sql.NullString `json:"description"`
	Position    int64          `json:"position"`
	Completed   sql.NullInt64  `json:"completed"`
	AssigneeID  sql.NullString `json:"assignee_id"`
	ListID      string         `json:"list_id"`
}

func (q *Queries) GetCardsByListIds(ctx context.Context, listIds []string) ([]GetCardsByListIdsRow, error) {
	query := getCardsByListIds
	var queryParams []interface{}
	if len(listIds) > 0 {
		for _, v := range listIds {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:list_ids*/?", strings.Repeat(",?", len(listIds))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:list_ids*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCardsByListIdsRow{}
	for rows.Next() {
		var i GetCardsByListIdsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Position,
			&i.Completed,
			&i.AssigneeID,
			&i.ListID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMaxPositionInList = `-- name: GetMaxPositionInList :one
SELECT CAST(COALESCE(MAX(position), -1) AS INTEGER) as max_position
FROM cards
WHERE list_id = ?
`

func (q *Queries) GetMaxPositionInList(ctx context.Context, listID string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getMaxPositionInList, listID)
	var max_position int64
	err := row.Scan(&max_position)
	return max_position, err
}

const updateCard = `-- name: UpdateCard :exec
UPDATE cards
SET title = ?,
    description = ?,
    assignee_id = ?
WHERE id = ?
`

type UpdateCardParams struct {
	Title       string         `json:"title"`
	Description sql.NullString `json:"description"`
	AssigneeID  sql.NullString `json:"assignee_id"`
	ID          string         `json:"id"`
}

func (q *Queries) UpdateCard(ctx context.Context, arg UpdateCardParams) error {
	_, err := q.db.ExecContext(ctx, updateCard,
		arg.Title,
		arg.Description,
		arg.AssigneeID,
		arg.ID,
	)
	return err
}

const updateCardCompleted = `-- name: UpdateCardCompleted :exec
UPDATE cards
SET completed = ?
WHERE id = ?
`

type UpdateCardCompletedParams struct {
	Completed sql.NullInt64 `json:"completed"`
	ID        string        `json:"id"`
}

func (q *Queries) UpdateCardCompleted(ctx context.Context, arg UpdateCardCompletedParams) error {
	_, err := q.db.ExecContext(ctx, updateCardCompleted, arg.Completed, arg.ID)
	return err
}

const updateCardList = `-- name: UpdateCardList :exec
UPDATE cards
SET list_id = ?
WHERE id = ?
`

type UpdateCardListParams struct {
	ListID string `json:"list_id"`
	ID     string `json:"id"`
}

func (q *Queries) UpdateCardList(ctx context.Context, arg UpdateCardListParams) error {
	_, err := q.db.ExecContext(ctx, updateCardList, arg.ListID, arg.ID)
	return err
}

const updateCardPosition = `-- name: UpdateCardPosition :exec
UPDATE cards
SET position = ?
WHERE id = ?
`

type UpdateCardPositionParams struct {
	Position int64  `json:"position"`
	ID       string `json:"id"`
}

func (q *Queries) UpdateCardPosition(ctx context.Context, arg UpdateCardPositionParams) error {
	_, err := q.db.ExecContext(ctx, updateCardPosition, arg.Position, arg.ID)
	return err
}
