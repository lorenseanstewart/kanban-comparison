package board

import (
	"fmt"
	"kanban-datastar/pkg/database/sqlcgen"
)

templ CardList(list ListWithCards, boardID string) {
	<article class="card bg-base-200 dark:bg-base-300 min-w-[20rem] shadow-xl">
		<div class="card-body gap-4">
			<header class="flex items-center justify-between">
				<h2 class="card-title text-base-content">{ list.Title }</h2>
				<div class="badge badge-primary badge-outline badge-lg shadow">
					{ fmt.Sprintf("%d cards", len(list.Cards)) }
				</div>
			</header>
			<div class="card-list min-h-[200px] transition-all duration-200 rounded-lg space-y-3">
				if len(list.Cards) == 0 {
					<div class="empty-placeholder alert alert-info text-sm">
						<span>No cards yet</span>
					</div>
				} else {
					for _, card := range list.Cards {
						@Card(card, boardID)
					}
				}
			</div>
		</div>
	</article>
}

templ Card(card CardWithDetails, boardID string) {
	<article class="card bg-base-100 dark:bg-neutral shadow-lg transition-all duration-300 ease-in-out">
		<div class="card-body gap-3 p-4">
			<div class="flex items-start justify-between gap-2">
				<h3 class="card-title text-lg text-base-content">{ card.Title }</h3>
				if card.Completed {
					<span class="badge badge-success badge-outline">Done</span>
				}
			</div>
			if card.AssigneeID != "" {
				<div class="badge badge-outline badge-secondary badge-sm">
					Assigned to { card.AssigneeName }
				</div>
			}
			if card.Description != "" {
				<p class="text-sm text-base-content/70 bg-base-200 dark:bg-base-100 rounded-xl px-3 py-2">
					{ card.Description }
				</p>
			}
			if len(card.Tags) > 0 {
				<div class="flex flex-wrap gap-2.5 rounded-xl px-3 py-2 bg-base-200 dark:bg-base-100">
					for _, tag := range card.Tags {
						<span class="badge border-0 shadow font-semibold text-white" style={ fmt.Sprintf("background-color: %s;", tag.Color) }>
							{ tag.Name }
						</span>
					}
				</div>
			}
			if len(card.Comments) > 0 {
				<div class="rounded-2xl bg-base-200 dark:bg-base-100 p-3 space-y-2 shadow-inner relative">
					<p class="text-xs font-semibold text-base-content/50">Comments</p>
					<ul class="space-y-1 text-sm text-base-content/70">
						for _, comment := range card.Comments {
							<li>
								<span class="font-semibold text-base-content">
									{ comment.UserName }:
								</span>
								{ " " }
								{ comment.Text }
							</li>
						}
					</ul>
				</div>
			}
		</div>
	</article>
}

templ AddCardModal(boardID string, users []sqlcgen.User, tags []sqlcgen.GetTagsRow) {
	<dialog id="addCardModal" class="modal">
		<div class="modal-box bg-base-200 dark:bg-base-300">
			<button type="button" class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2" onclick="addCardModal.close()">
				âœ•
			</button>
			<form
				method="POST"
				data-on:submit={ fmt.Sprintf("@post('/board/%s/card', {contentType: 'form'}); addCardModal.close()", boardID) }
			>
				<h3 class="font-bold text-lg mb-4">Add New Card</h3>
				<div class="form-control w-full mb-4">
					<label class="label" for="card-title">
						<span class="label-text">Title</span>
					</label>
					<input
						id="card-title"
						name="title"
						type="text"
						class="input input-bordered w-full"
						placeholder="Enter card title"
						required
					/>
				</div>
				<div class="form-control w-full mb-4">
					<label class="label" for="card-description">
						<span class="label-text">Description</span>
					</label>
					<textarea
						id="card-description"
						name="description"
						class="textarea textarea-bordered h-24 w-full"
						placeholder="Enter card description (optional)"
					></textarea>
				</div>
				<div class="form-control w-full mb-4">
					<label class="label" for="card-assignee">
						<span class="label-text">Assignee</span>
					</label>
					<select
						id="card-assignee"
						name="assigneeId"
						class="select select-bordered w-full"
					>
						<option value="">Unassigned</option>
						for _, user := range users {
							<option value={ user.ID }>{ user.Name }</option>
						}
					</select>
				</div>
				<div class="form-control w-full mb-4">
					<div class="label">
						<span class="label-text">Tags</span>
					</div>
					<div class="flex flex-wrap gap-2 p-4 border border-base-300 rounded-lg">
						for _, tag := range tags {
							<label
								class="tag-checkbox-label badge border-2 font-semibold cursor-pointer transition-all hover:scale-105"
								style={ fmt.Sprintf("--tag-color: %s; color: %s; border-color: %s;", tag.Color, tag.Color, tag.Color) }
							>
								<input
									type="checkbox"
									name="tagIds"
									value={ tag.ID }
									class="hidden"
								/>
								<span>{ tag.Name }</span>
							</label>
						}
					</div>
				</div>
				<div class="modal-action">
					<button type="button" class="btn btn-ghost" onclick="addCardModal.close()">
						Cancel
					</button>
					<button type="submit" class="btn btn-primary">
						Add Card
					</button>
				</div>
			</form>
		</div>
	</dialog>
	<style>
		.tag-checkbox-label:has(input:checked) {
			background-color: var(--tag-color) !important;
			color: white !important;
		}
	</style>
}

// Helper function to calculate total cards
func getTotalCards(lists []ListWithCards) int {
	total := 0
	for _, list := range lists {
		total += len(list.Cards)
	}
	return total
}
