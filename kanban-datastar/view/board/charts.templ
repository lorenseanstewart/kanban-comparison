package board

import "fmt"

type ChartData struct {
	Label string
	Value int
}

templ BarChart(data []ChartData, colors []string, title string) {
	<div class="card bg-base-100 shadow-lg">
		<div class="card-body p-4">
			<h3 class="card-title text-sm text-base-content mb-4">{ title }</h3>
			<div
				class="grid gap-4"
				style={ fmt.Sprintf("grid-template-columns: repeat(%d, 1fr);", len(data)) }
			>
				for i, item := range data {
					@BarChartItem(item, colors[i%len(colors)], getMaxValue(data))
				}
			</div>
		</div>
	</div>
}

templ BarChartItem(item ChartData, color string, maxValue int) {
	<div class="flex flex-col items-center gap-2">
		<div class="w-full flex flex-col justify-end" style="height: 150px;">
			if maxValue > 0 {
				<div
					class="w-full rounded-t transition-all duration-500 ease-out"
					style={ fmt.Sprintf("height: %d%%; background-color: %s;", (item.Value*100)/maxValue, color) }
				>
					<div class="text-xs text-white font-semibold text-center pt-1">
						{ fmt.Sprintf("%d", item.Value) }
					</div>
				</div>
			}
		</div>
		<div class="text-xs text-base-content text-center font-medium pt-3">
			{ item.Label }
		</div>
	</div>
}

templ PieChart(data []ChartData, colors []string, title string) {
	<div class="card bg-base-100 shadow-lg">
		<div class="card-body p-4 flex flex-col items-center">
			<h3 class="card-title text-sm text-base-content mb-2 w-full">
				{ title }
			</h3>
			<table
				class="charts-css pie mx-auto mb-3"
				style="height: 120px; width: 120px; --labels-size: 0;"
			>
				<tbody>
					for i, item := range data {
						@PieChartSlice(item, i, data, colors, getTotalValue(data))
					}
				</tbody>
			</table>
			<!-- Legend -->
			<div class="flex flex-col gap-1 w-full">
				for i, item := range data {
					@PieChartLegendItem(item, colors[i%len(colors)], getTotalValue(data))
				}
			</div>
		</div>
	</div>
}

templ PieChartSlice(item ChartData, index int, allData []ChartData, colors []string, totalValue int) {
	<tr>
		<td
			style={ fmt.Sprintf("--start: %f; --end: %f; --color: %s;",
				getStartValue(allData, index, totalValue),
				getEndValue(allData, index, totalValue),
				colors[index % len(colors)]) }
		></td>
	</tr>
}

templ PieChartLegendItem(item ChartData, color string, totalValue int) {
	<div class="flex items-center gap-2 justify-between">
		<div class="flex items-center gap-2">
			<div
				class="w-2.5 h-2.5 rounded-sm flex-shrink-0"
				style={ fmt.Sprintf("background-color: %s;", color) }
			></div>
			<span class="text-xs text-base-content">{ item.Label }</span>
		</div>
		<span class="text-xs font-semibold text-base-content">
			if totalValue > 0 {
				{ fmt.Sprintf("%.0f%%", float64(item.Value) / float64(totalValue) * 100) }
			} else {
				0%
			}
		</span>
	</div>
}

func getMaxValue(data []ChartData) int {
	max := 1
	for _, item := range data {
		if item.Value > max {
			max = item.Value
		}
	}
	return max
}

func getTotalValue(data []ChartData) int {
	total := 0
	for _, item := range data {
		total += item.Value
	}
	return total
}

func getStartValue(data []ChartData, currentIndex int, totalValue int) float64 {
	if totalValue == 0 {
		return 0
	}
	sum := 0
	for i := 0; i < currentIndex; i++ {
		sum += data[i].Value
	}
	return float64(sum) / float64(totalValue)
}

func getEndValue(data []ChartData, currentIndex int, totalValue int) float64 {
	if totalValue == 0 {
		return 0
	}
	sum := 0
	for i := 0; i <= currentIndex; i++ {
		sum += data[i].Value
	}
	return float64(sum) / float64(totalValue)
}
