---
import { getBoard, getUsers, createCard } from '../../../lib/api';
import BoardCardsSection from '../../../components/BoardCardsSection.astro';
import BarChart from '../../../components/charts/BarChart.astro';
import PieChart from '../../../components/charts/PieChart.astro';
import * as v from 'valibot';
import { CardSchema } from '../../../lib/validation';

const { boardId } = Astro.params;

if (!boardId) {
  Astro.response.status = 400;
  return new Response('Board ID required', { status: 400 });
}

// Handle POST - create a new card
if (Astro.request.method === 'POST') {
  try {
    const formData = await Astro.request.formData();
    const title = formData.get('title') as string;
    const description = formData.get('description') as string;
    const assigneeId = formData.get('assigneeId') as string;
    const tagIds = formData.getAll('tagIds') as string[];

    // Validate with Valibot
    const result = v.safeParse(CardSchema, {
      title,
      description: description || null,
      assigneeId: assigneeId || null,
      tagIds: tagIds.length > 0 ? tagIds : [],
      boardId,
    });

    if (!result.success) {
      Astro.response.status = 400;
      return new Response(result.issues[0].message, { status: 400 });
    }

    await createCard(result.output);
  } catch (error) {
    console.error('Failed to create card:', error);
    Astro.response.status = 500;
    return new Response('Failed to create card', { status: 500 });
  }
}

// Get updated board and users
const board = await getBoard(boardId);
const users = await getUsers();

if (!board) {
  Astro.response.status = 404;
  return new Response('Board not found', { status: 404 });
}

// Prepare chart data
const pastelColors = [
  "#fbbf24", // amber (warning)
  "#f472b6", // pink (secondary)
  "#a78bfa", // purple (primary)
  "#60a5fa", // blue (info)
];

const chartData = board.lists.map((list) => ({
  label: list.title,
  value: list.cards.length,
}));
---

<BoardCardsSection board={board} users={users} />

<!-- Out-of-band swap for charts -->
<div id="board-charts" hx-swap-oob="true" class="grid grid-cols-1 md:grid-cols-2 gap-12 md:gap-6 max-w-[1190px] mx-auto items-start">
  <BarChart
    data={chartData}
    colors={pastelColors}
    title="Cards per List"
  />
  <PieChart
    data={chartData}
    colors={pastelColors}
    title="Distribution"
  />
</div>
