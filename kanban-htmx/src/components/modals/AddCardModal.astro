---
import type { UsersList, TagsList } from '../lib/api';

interface Props {
  boardId: string;
  users: UsersList;
  tags: TagsList;
}

const { boardId, users, tags } = Astro.props;
---

<dialog id="add-card-modal" class="modal">
  <div class="modal-box bg-base-200 dark:bg-base-300">
    <form method="dialog">
      <button class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2">âœ•</button>
    </form>

    <h3 class="font-bold text-lg mb-4">Add New Card</h3>

    <div id="add-card-error" class="mb-4"></div>

    <form
      id="add-card-form"
      class="space-y-4"
      hx-post={`/api/board-cards/${boardId}`}
      hx-target="#board-cards-section"
      hx-swap="outerHTML"
      hx-on::after-request="window.kanban.handleAddCardSuccess(event,this)"
    >
      <input type="hidden" name="boardId" value={boardId} />

      <div class="form-control w-full">
        <label class="label">
          <span class="label-text">Title</span>
        </label>
        <input
          type="text"
          name="title"
          class="input input-bordered w-full"
          placeholder="Enter card title"
        />
      </div>

      <div class="form-control w-full">
        <label class="label">
          <span class="label-text">Description</span>
        </label>
        <textarea
          name="description"
          class="textarea textarea-bordered h-24 w-full"
          placeholder="Enter card description (optional)"
        ></textarea>
      </div>

      <div class="form-control w-full">
        <label class="label">
          <span class="label-text">Assignee</span>
        </label>
        <select name="assigneeId" class="select select-bordered w-full">
          <option value="">Unassigned</option>
          {users.map((user) => (
            <option value={user.id}>{user.name}</option>
          ))}
        </select>
      </div>

      <div class="form-control w-full">
        <label class="label">
          <span class="label-text">Tags</span>
        </label>
        <div class="flex flex-wrap gap-2 p-4 border border-base-300 rounded-lg">
          {tags.map((tag) => (
            <label class="cursor-pointer">
              <input
                type="checkbox"
                name="tagIds"
                value={tag.id}
                class="hidden tag-checkbox"
                data-tag-id={tag.id}
              />
              <span
                class="badge border-2 font-semibold transition-all hover:scale-105 badge-outline"
                style={`color: ${tag.color}; border-color: ${tag.color};`}
                data-tag-badge={tag.id}
              >
                {tag.name}
              </span>
            </label>
          ))}
        </div>
      </div>

      <div class="modal-action">
        <button type="button" class="btn btn-ghost" onclick="document.getElementById('add-card-modal').close()">
          Cancel
        </button>
        <button type="submit" class="btn btn-primary">
          Add Card
        </button>
      </div>
    </form>
  </div>
  <form method="dialog" class="modal-backdrop">
    <button>close</button>
  </form>
</dialog>

<script>
  // Handle tag selection
  document.querySelectorAll('.tag-checkbox').forEach(checkbox => {
    checkbox.addEventListener('change', (e) => {
      const target = e.target as HTMLInputElement;
      const tagId = target.dataset.tagId;
      const badge = document.querySelector(`[data-tag-badge="${tagId}"]`) as HTMLElement;

      if (target.checked) {
        badge.classList.remove('badge-outline');
        badge.classList.add('text-white');
        const bgColor = badge.style.color;
        badge.style.backgroundColor = bgColor;
      } else {
        badge.classList.add('badge-outline');
        badge.classList.remove('text-white');
        badge.style.backgroundColor = '';
      }
    });
  });
</script>
