---
import type {
  BoardDetails,
  User,
  UsersList,
  TagItem,
  TagsList,
} from "../../lib/api";

interface Props {
  board: BoardDetails;
  users: UsersList;
  tags: TagsList;
}

const { board, users, tags } = Astro.props;
---

<dialog
  id="edit-card-modal"
  class="modal"
>
  <div class="modal-box bg-base-200 dark:bg-base-300">
    <form method="dialog">
      <button class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2"
        >âœ•</button
      >
    </form>

    <h3 class="font-bold text-lg mb-4">Edit Card</h3>

    <div
      id="edit-card-error"
      class="mb-4"
    >
    </div>

    <form
      id="edit-card-form"
      class="space-y-4"
      hx-patch=""
      hx-target="#board-cards-section"
      hx-swap="outerHTML"
      hx-on::after-request="window.kanban.handleEditCardSuccess(event)"
    >
      <input
        type="hidden"
        id="edit-card-id"
        name="cardId"
        value=""
      />
      <input
        type="hidden"
        id="edit-board-id"
        name="boardId"
        value={board.id}
      />

      <div class="form-control w-full">
        <label class="label">
          <span class="label-text">Title</span>
        </label>
        <input
          type="text"
          id="edit-card-title"
          name="title"
          class="input input-bordered w-full"
          placeholder="Enter card title"
        />
      </div>

      <div class="form-control w-full">
        <label class="label">
          <span class="label-text">Description</span>
        </label>
        <textarea
          id="edit-card-description"
          name="description"
          class="textarea textarea-bordered h-24 w-full"
          placeholder="Enter card description (optional)"
        ></textarea>
      </div>

      <div class="form-control w-full">
        <label class="label">
          <span class="label-text">Assignee</span>
        </label>
        <select
          id="edit-card-assignee"
          name="assigneeId"
          class="select select-bordered w-full"
        >
          <option value="">Unassigned</option>
          {
            users.map((user: User) => (
              <option value={user.id}>{user.name}</option>
            ))
          }
        </select>
      </div>

      <div class="form-control w-full">
        <label class="label">
          <span class="label-text">Tags</span>
        </label>
        <div class="flex flex-wrap gap-2 p-4 border border-base-300 rounded-lg">
          {
            tags.map((tag: TagItem) => (
              <label class="cursor-pointer">
                <input
                  type="checkbox"
                  name="tagIds"
                  value={tag.id}
                  class="hidden edit-tag-checkbox"
                  data-edit-tag-id={tag.id}
                />
                <span
                  class="badge border-2 font-semibold transition-all hover:scale-105 badge-outline"
                  style={`color: ${tag.color}; border-color: ${tag.color};`}
                  data-edit-tag-badge={tag.id}
                >
                  {tag.name}
                </span>
              </label>
            ))
          }
        </div>
      </div>

      <div class="modal-action justify-between">
        <button
          type="button"
          id="delete-card-btn"
          class="btn btn-error"
          hx-delete=""
          hx-target="#board-cards-section"
          hx-swap="outerHTML"
          hx-confirm="Are you sure you want to delete this card?"
          hx-on::after-request="if(event.detail.successful) document.getElementById('edit-card-modal').close()"
        >
          Delete Card
        </button>
        <div class="flex gap-2">
          <button
            type="button"
            class="btn btn-ghost"
            onclick="document.getElementById('edit-card-modal').close()"
          >
            Cancel
          </button>
          <button
            type="submit"
            class="btn btn-primary"
          >
            Save Changes
          </button>
        </div>
      </div>
    </form>
  </div>
  <form
    method="dialog"
    class="modal-backdrop"
  >
    <button>close</button>
  </form>
</dialog>

<script define:vars={{ board }}>
  // Initialize namespace if not exists
  if (!window.kanban) {
    window.kanban = {};
  }

  // Initialize board data on first load
  if (!window.kanban.board) {
    window.kanban.board = board;
  }
</script>

<script>
  // Handle tag selection
  document.querySelectorAll(".edit-tag-checkbox").forEach((checkbox) => {
    const tagId = checkbox.dataset.editTagId;
    const badge = document.querySelector(
      `[data-edit-tag-badge="${tagId}"]`
    ) as HTMLElement;

    // Store original color ONCE
    if (!badge.dataset.originalColor) {
      badge.dataset.originalColor = badge.style.color;
    }

    checkbox.addEventListener("change", (e: Event) => {
      const target = e.target as HTMLInputElement;

      if (target.checked) {
        badge.classList.remove("badge-outline");
        badge.classList.add("text-white");
        badge.style.backgroundColor = badge.dataset.originalColor;
        badge.style.color = "white";
      } else {
        badge.classList.add("badge-outline");
        badge.classList.remove("text-white");
        badge.style.backgroundColor = "";
        badge.style.color = badge.dataset.originalColor;
      }
    });
  });
</script>
